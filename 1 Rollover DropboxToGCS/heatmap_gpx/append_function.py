from google.cloud import storage
import os
import re

BUCKET_NAME = os.environ.get("GCS_BUCKET_NAME")
LOCAL_TMP = "/tmp"

def strip_source_content(file_path: str) -> str | None:
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()
    if len(lines) <= 2:
        print("")  # –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –æ–±—Ä—ñ–∑–∞–Ω–Ω—è
        return None
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à—ñ –¥–≤–∞ —Ä—è–¥–∫–∏ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π
    stripped_lines = lines[2:-1]
    with open(file_path, "w", encoding="utf-8") as f:
        f.writelines(stripped_lines)
    return "".join(stripped_lines)




def chose_branch(bike_model):
    # –ü–æ–≤–µ—Ä—Ç–∞—î –ª–æ–∫–∞–ª—å–Ω—ñ —ñ–º–µ–Ω–∞ —Ñ–∞–π–ª—ñ–≤
    return {
        'b7647614': ['mtb.gpx', 'mtb_index.txt'],
        'b8850168': ['gravel.gpx', 'gravel_index.txt']
    }.get(bike_model)

def extract_first_time_tag(file_path: str) -> str | None:
    time_pattern = re.compile(r"<time>(.*?)</time>")
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            match = time_pattern.search(line)
            if match:
                return match.group(1)
    return None

def download_blob_if_exists(bucket, blob_name, local_path):
    blob = bucket.blob(blob_name)
    if blob.exists():
        os.makedirs(os.path.dirname(local_path), exist_ok=True)
        blob.download_to_filename(local_path)
        return True
    return False

def upload_blob(bucket, local_path, blob_name):
    blob = bucket.blob(blob_name)
    blob.upload_from_filename(local_path)

def delete_blob(bucket, blob_name):
    blob = bucket.blob(blob_name)
    if blob.exists():
        blob.delete()

def append_gpx_via_compose(local_gpx: str, bike_model: str):
    branch = chose_branch(bike_model)
    if branch is None:
        print(f"–ù–µ–≤—ñ–¥–æ–º–∏–π bike_model: {bike_model}")
        return

    gpx_name, index_name = branch

    # –õ–æ–∫–∞–ª—å–Ω—ñ —à–ª—è—Ö–∏
    local_index_path = os.path.join(LOCAL_TMP, index_name)

    # –®–ª—è—Ö–∏ –≤ bucket
    main_blob_name = f"heatmap/{gpx_name}"
    index_blob_name = f"heatmap/{index_name}"
    fragment_blob_name = f"heatmap/fragments/{os.path.basename(local_gpx)}"

    client = storage.Client()
    bucket = client.bucket(BUCKET_NAME)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å
    indexed_dates = set()
    if download_blob_if_exists(bucket, index_blob_name, local_index_path):
        with open(local_index_path, "r", encoding="utf-8") as f:
            indexed_dates = set(line.strip() for line in f)

    # –í–∏—Ç—è–≥–Ω—É—Ç–∏ –¥–∞—Ç—É
    first_date = extract_first_time_tag(local_gpx)
    if not first_date:
        print(f"–£ —Ñ–∞–π–ª—ñ '{local_gpx}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–≥ <time>.")
        return

    if first_date in indexed_dates:
        print(f"–î–∞—Ç–∞ {first_date} –≤–∂–µ —î –≤ —ñ–Ω–¥–µ–∫—Å—ñ. –§–∞–π–ª –Ω–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ.")
        return

    # –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å –ª–æ–∫–∞–ª—å–Ω–æ
    os.makedirs(os.path.dirname(local_index_path), exist_ok=True)
    with open(local_index_path, "a", encoding="utf-8") as f:
        f.write(first_date + "\n")

    strip_source_content(local_gpx)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —É bucket
    upload_blob(bucket, local_gpx, fragment_blob_name)

    # –û–±‚Äô—î–¥–Ω–∞—Ç–∏
    main_blob = bucket.blob(main_blob_name)
    fragment_blob = bucket.blob(fragment_blob_name)

    if not main_blob.exists():
        print(f"–ì–æ–ª–æ–≤–Ω–∏–π GPX-—Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—é—é –∑ —à–∞–±–ª–æ–Ω—É.")
        main_blob_path = os.path.join(LOCAL_TMP, os.path.basename(main_blob_name))
        os.makedirs(os.path.dirname(main_blob_path), exist_ok=True)

        with open(main_blob_path, "w", encoding="utf-8") as f:
            f.write("""<?xml version="1.0" encoding="UTF-8"?>
        <gpx version="1.1" creator="SPipeline">
         """)

        upload_blob(bucket, main_blob_path, main_blob_name)
        print(f"–®–∞–±–ª–æ–Ω GPX-—Ñ–∞–π–ª—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —è–∫ '{main_blob_name}'.")


    main_blob.compose([main_blob, fragment_blob])
    print(f"–§–∞–π–ª '{fragment_blob_name}' –¥–æ–¥–∞–Ω–æ –¥–æ '{main_blob_name}'.")

    # # 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑ </gpx>
    # closer_path = os.path.join(LOCAL_TMP, "gpx_closer.gpx")
    # with open(closer_path, "w", encoding="utf-8") as f:
    #     f.write("</gpx>\n")
    #
    # # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ bucket
    # closer_blob_name = "heatmap/closer.gpx"
    # upload_blob(bucket, closer_path, closer_blob_name)
    #
    # # 3. –û–±‚Äô—î–¥–Ω–∞—Ç–∏ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º GPX
    # closer_blob = bucket.blob(closer_blob_name)
    # if not closer_blob.exists():
    #     print(f"closer_blob '{closer_blob_name}' –Ω–µ —ñ—Å–Ω—É—î ‚Äî –Ω–µ –¥–æ–¥–∞—î–º–æ </gpx>")
    #     return
    # print(f"closer_blob —Ä–æ–∑–º—ñ—Ä: {closer_blob.size} –±–∞–π—Ç")
    # main_blob.compose([main_blob, closer_blob])
    # print("–ó–∞–∫—Ä–∏–≤–∞—é—á—ñ —Ç–µ–≥–∏ –¥–æ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ compose.")
    #
    # # 4. (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ) –í–∏–¥–∞–ª–∏—Ç–∏ closer blob
    # delete_blob(bucket, closer_blob_name)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞–∑–∞–¥
    upload_blob(bucket, local_index_path, index_blob_name)

    # üßπ –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç
    delete_blob(bucket, fragment_blob_name)
    print(f"–§—Ä–∞–≥–º–µ–Ω—Ç '{fragment_blob_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –æ–±‚Äô—î–¥–Ω–∞–Ω–Ω—è.")
